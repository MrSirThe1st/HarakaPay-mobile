-- ============================================
-- STEP 1: Add M-Pesa columns to payments table
-- ============================================

ALTER TABLE payments 
ADD COLUMN IF NOT EXISTS parent_id UUID REFERENCES parents(id),
ADD COLUMN IF NOT EXISTS transaction_reference VARCHAR(100) UNIQUE,
ADD COLUMN IF NOT EXISTS mpesa_conversation_id VARCHAR(100),
ADD COLUMN IF NOT EXISTS mpesa_third_party_id VARCHAR(100),
ADD COLUMN IF NOT EXISTS installment_number INTEGER,
ADD COLUMN IF NOT EXISTS payment_gateway_response JSONB;

-- Add comments to document the columns
COMMENT ON COLUMN payments.transaction_reference IS 'M-Pesa Transaction ID from output_TransactionID';
COMMENT ON COLUMN payments.mpesa_conversation_id IS 'M-Pesa Conversation ID from output_ConversationID';
COMMENT ON COLUMN payments.mpesa_third_party_id IS 'Your reference ID from output_ThirdPartyConversationID';
COMMENT ON COLUMN payments.installment_number IS 'Which installment number this payment covers';
COMMENT ON COLUMN payments.payment_gateway_response IS 'Full JSON response from M-Pesa API';

-- ============================================
-- STEP 2: Create payment_transactions table
-- ============================================

CREATE TABLE IF NOT EXISTS payment_transactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  payment_id UUID REFERENCES payments(id) ON DELETE CASCADE,
  student_fee_assignment_id UUID REFERENCES student_fee_assignments(id) ON DELETE CASCADE,
  installment_number INTEGER,
  amount_paid DECIMAL(10,2) NOT NULL,
  transaction_status VARCHAR(50) DEFAULT 'pending',
  mpesa_transaction_id VARCHAR(100),
  payment_plan_id UUID REFERENCES payment_plans(id),
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE payment_transactions IS 'Tracks individual installment payments linked to fee assignments';

-- ============================================
-- STEP 3: Create indexes for performance
-- ============================================

-- Payments table indexes
CREATE INDEX IF NOT EXISTS idx_payments_transaction_ref 
  ON payments(transaction_reference) 
  WHERE transaction_reference IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_payments_mpesa_conversation 
  ON payments(mpesa_conversation_id) 
  WHERE mpesa_conversation_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_payments_mpesa_third_party 
  ON payments(mpesa_third_party_id) 
  WHERE mpesa_third_party_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_payments_parent_id 
  ON payments(parent_id) 
  WHERE parent_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_payments_status 
  ON payments(status);

CREATE INDEX IF NOT EXISTS idx_payments_student_date 
  ON payments(student_id, payment_date DESC);

-- Payment_transactions table indexes
CREATE INDEX IF NOT EXISTS idx_payment_transactions_payment 
  ON payment_transactions(payment_id);

CREATE INDEX IF NOT EXISTS idx_payment_transactions_assignment 
  ON payment_transactions(student_fee_assignment_id);

CREATE INDEX IF NOT EXISTS idx_payment_transactions_mpesa 
  ON payment_transactions(mpesa_transaction_id) 
  WHERE mpesa_transaction_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_payment_transactions_status 
  ON payment_transactions(transaction_status);

-- ============================================
-- STEP 4: Add triggers for updated_at
-- ============================================

-- Create or replace the updated_at function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add trigger to payment_transactions
DROP TRIGGER IF EXISTS trigger_payment_transactions_updated_at ON payment_transactions;
CREATE TRIGGER trigger_payment_transactions_updated_at
  BEFORE UPDATE ON payment_transactions
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- ============================================
-- STEP 5: RLS Configuration for Service Role
-- ============================================

-- Enable RLS but allow service role full access
ALTER TABLE payment_transactions ENABLE ROW LEVEL SECURITY;

-- Drop any existing policies
DROP POLICY IF EXISTS "Service role bypass" ON payment_transactions;

-- Single policy: Service role has full access (for your API routes)
CREATE POLICY "Service role bypass"
  ON payment_transactions
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- Do the same for payments table (if not already done)
DROP POLICY IF EXISTS "Service role bypass" ON payments;
CREATE POLICY "Service role bypass"
  ON payments
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- ============================================
-- OPTIONAL: Disable RLS if you prefer
-- ============================================
-- If you want to completely disable RLS since you're doing
-- application-level checks, you can run these instead:

-- ALTER TABLE payment_transactions DISABLE ROW LEVEL SECURITY;
-- ALTER TABLE payments DISABLE ROW LEVEL SECURITY;

-- Note: Only do this if you're 100% confident your API
-- routes have proper permission checks